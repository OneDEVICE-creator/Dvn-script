-- Use _G to store global settings
_G.BigHeadSize = _G.BigHeadSize or 10  -- Default to 10 if not set
_G.NormalHeadSize = _G.NormalHeadSize or Vector3.new(1, 1, 1)
_G.Transparent = _G.Transparent or 0  -- Default to 0 if not set

_G.ToolsToAffect = _G.ToolsToAffect or {"Medical Bow", "Recurve", "Vitabow", "Mastermind's Rifle"}

-- Executor-friendly script that runs on the client's side
local HttpService = game:GetService("HttpService")
local player = game.Players.LocalPlayer

-- URL of the config JSON on GitHub
local configUrl = "https://raw.githubusercontent.com/OneDEVICE-creator/Dvn-script/main/config.json"

-- Fetch the config data from GitHub
local configData = HttpService:GetAsync(configUrl)
local config = HttpService:JSONDecode(configData)

-- Override _G settings with the values from GitHub config
_G.BigHeadSize = config.BigHeadSize or _G.BigHeadSize
_G.Transparent = config.Transparent or _G.Transparent

-- Function to check if the player has a head
local function checkHead(player)
    local character = player.Character
    if character and character:FindFirstChild("Head") then
        return character.Head
    end
    return nil
end

game:GetService('RunService').RenderStepped:Connect(function()
    -- Ensure player and head exist
    if not player or not player.Character or not player.Character:FindFirstChild("Head") then return end

    -- Check if player is using the correct tool
    local usingCorrectTool = false
    local equippedTool = player.Character:FindFirstChildOfClass("Tool")
    if equippedTool then
        for _, toolName in ipairs(_G.ToolsToAffect) do
            if equippedTool.Name == toolName then
                usingCorrectTool = true
                break
            end
        end
    end

    -- Iterate through other players and modify head properties
    for _, otherPlayer in ipairs(game:GetService('Players'):GetPlayers()) do
        if otherPlayer ~= player then
            local otherHead = checkHead(otherPlayer)
            if otherHead then
                if usingCorrectTool then
                    otherHead.Size = Vector3.new(_G.BigHeadSize, _G.BigHeadSize, _G.BigHeadSize)
                    otherHead.Transparency = _G.Transparent
                    otherHead.BrickColor = BrickColor.new("cyan")
                    otherHead.Material = "Neon"
                    otherHead.CanCollide = false
                    otherHead.Massless = true
                else
                    otherHead.Size = _G.NormalHeadSize
                    otherHead.Transparency = 0
                    otherHead.BrickColor = BrickColor.new("cyan")
                    otherHead.Material = Enum.Material.Plastic
                    otherHead.CanCollide = false
                    otherHead.Massless = false
                end
            end
        end
    end
end)

-- Function to execute the script
local function executeScript()
    -- Your existing script logic here...

    -- Send notification saying "Executed"
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Script Executed",
        Text = "The script has been executed successfully!",
        Duration = 5
    })

    -- Send notification saying "Have fun" and credit the script creator
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Have Fun!",
        Text = "Script made by DeathShot",
        Duration = 5
    })
end

-- Call the function to execute the script
executeScript()
