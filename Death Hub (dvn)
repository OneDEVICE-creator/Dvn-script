-- Game ID check
local allowedGameId = 8657806289  -- Game ID for "Dummies vs Noob"

if game.PlaceId == allowedGameId then
    -- Only proceed if the script is in the correct game
    print("Script is running in Dummies vs Noob!")
    
local Rayfield = loadstring(game:HttpGet('https://[Log in to view URL]'))()

local Window = Rayfield:CreateWindow({
   Name = "DEATH HUBðŸ˜¼",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Wait",
   LoadingSubtitle = "by DeathShot",
   Theme = "Ocean", -- Check https://[Log in to view URL]

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Death Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Rayfield:Notify({
   Title = "Script Executed",
   Content = "The script has been executed successfully!",
   Duration = 6.5,
   Image = nil,
})

Rayfield:Notify({
   Title = "Have Fun!",
   Content = "Script made by DeathShot",
   Duration = 6.5,
   Image = 4483362458,
})

local MainTab = MainWindow:CreateTab("Main", nil)
local MainSection = MainTab:CreateSection("Dvn Script")
local Button = MainTab:CreateButton({
   Name = "Gun Mod Gui",
   Callback = function()
   loadstring(game:HttpGet("https://[Log in to view URL]"))()
   end,
})

local Slider1 = MainTab:CreateSlider({
   Name = "Enemy Head Size",
   Range = {1, 10}, -- Adjust the range as needed
   Increment = 0.5,
   Suffix = "",
   CurrentValue = _G.EnemiesHeadSize or 8.0,
   Flag = "EnemyHeadSize",
   Callback = function(Value)
       _G.EnemiesHeadSize = Value
   end,
})

local Slider2 = MainTab:CreateSlider({
   Name = "Prometheus Head Size",
   Range = {1, 10},
   Increment = 0.5,
   Suffix = "",
   CurrentValue = _G.PrometheusHeadSize or 4.0,
   Flag = "PrometheusHeadSize",
   Callback = function(Value)
       _G.PrometheusHeadSize = Value
   end,
})

local Slider3 = MainTab:CreateSlider({
   Name = "Transparency",
   Range = {0, 1},
   Increment = 0.1,
   Suffix = "",
   CurrentValue = _G.Transparency or 0.9,
   Flag = "Transparency",
   Callback = function(Value)
       _G.Transparency = Value
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Enable Big Heads",
   CurrentValue = false,
   Flag = "BigHeadToggle",
   Callback = function(Value)
       _G.ScriptEnabled = Value
       
       if Value then
           -- Run the external script when enabled
           loadstring(game:HttpGet("https://[Log in to view URL]"))()
           
           -- Show notification for ON
           Rayfield:Notify({
               Title = "Big Heads",
               Content = "Big Heads Enabled!",
               Duration = 3, -- Show for 3 seconds
               Image = nil, 
           })
       else
           -- Reset enemy heads when disabled
           for _, v in ipairs(workspace:GetChildren()) do
               if v:FindFirstChild("Head") then
                   v.Head.Size = Vector3.new(1, 1, 1) -- Reset size
                   v.Head.Transparency = 0 -- Reset transparency
               end
           end

           -- Show notification for OFF
           Rayfield:Notify({
               Title = "Big Heads",
               Content = "Big Heads Disabled!",
               Duration = 3, -- Show for 3 seconds
               Image = nil, 
           })
       end
   end,
})
